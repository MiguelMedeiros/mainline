//! Kademlia routing table based on the simplifications described [here](https://web.archive.org/web/20191122230423/https://github.com/ethereum/wiki/wiki/Kademlia-Peer-Selection)

use rand::Rng;
use std::net::IpAddr;

use crate::Result;

/// The size of node IDs in bits.
const ID_LENGTH: usize = 20;
/// The capacity of each row in the routing table.
const K: usize = 20;

#[derive(Debug, Clone, Copy)]
struct Id([u8; 20]);

impl Id {
    fn random() -> Id {
        let mut rng = rand::thread_rng();
        let random_bytes: [u8; 20] = rng.gen();

        Id(random_bytes)
    }

    fn distance(&self, other: &Id) -> i32 {
        for i in 0..ID_LENGTH {
            let a = self.0[i];
            let b = other.0[i];

            if a == b {
                return (i as i32) * 8 + (a ^ b).leading_zeros() as i32;
            }
        }

        (ID_LENGTH * 8) as i32 - 1
    }
}

#[derive(Debug)]
struct RoutingTable {
    rows: Vec<Row>,
    id: Id,
}

#[derive(Debug)]
struct Row {
    nodes: Vec<Node>,
}

#[derive(Debug)]
struct Node {
    id: Id,
    ip: IpAddr,
    port: u16,
}

impl RoutingTable {
    pub fn new() -> Self {
        let mut rows = Vec::with_capacity(ID_LENGTH * 8);
        rows.push(Row::new());

        RoutingTable {
            rows,
            id: Id::random(),
        }
    }

    pub fn with_id(mut self, id: Id) -> Self {
        self.id = id;
        self
    }

    pub fn add(&self, node: Node) -> Result<()> {
        //
        // let row = this.rows[i]
        //
        // if (!row) {
        //   row = this.rows[i] = new Row(this, i)
        //   this.emit('row', row)
        // }
        //
        // return row.add(node, this.k)

        Ok(())
    }
}

impl Row {
    fn new() -> Self {
        Row {
            nodes: Vec::with_capacity(K),
        }
    }
}

mod test {
    use std::mem;

    use crate::routing_table::{Id, ID_LENGTH};

    use super::{Node, RoutingTable};

    #[test]
    fn add_contact_to_root() {
        let table = RoutingTable::new();

        println!("{:?}", table);
    }

    #[test]
    fn distance_to_self() {
        let id = Id::random();
        let distance = id.distance(&id);

        dbg!(&distance);
        assert_eq!(distance, 0)
    }

    #[test]
    fn distance_to_other() {
        let id = Id([
            6, 57, 161, 226, 79, 187, 138, 178, 119, 223, 3, 52, 118, 171, 13, 225, 15, 171, 59,
            220,
        ]);
        let other = Id([
            3, 91, 26, 235, 151, 55, 173, 225, 168, 9, 51, 89, 79, 64, 93, 63, 119, 42, 160, 142,
        ]);

        let distance = id.distance(&other);

        assert_eq!(distance, 5)
    }

    #[test]
    fn distance_to_random_other() {
        let id = Id::random();
        let other = Id::random();

        dbg!(id, other);
        let distance = id.distance(&other);

        dbg!("other", &distance);
        assert_ne!(distance, 0)
    }

    #[test]
    fn distance_to_furthest() {
        let id = Id::random();
        let mut opposite = [0_u8; 20];

        for (i, &value) in id.0.iter().enumerate() {
            opposite[i] = value ^ 0xff;
        }

        let other = Id(opposite);

        dbg!(id, other);
        let distance = id.distance(&other);

        dbg!("distance", &distance);
        assert_eq!(distance, ID_LENGTH as i32 * 8 - 1)
    }

    #[test]
    fn closest() {
        let ids = [
            [
                46, 111, 151, 51, 168, 60, 43, 185, 238, 4, 103, 227, 85, 160, 223, 83, 134, 229,
                84, 41,
            ],
            [
                228, 74, 112, 207, 185, 213, 96, 10, 125, 108, 149, 10, 246, 167, 48, 21, 181, 183,
                251, 81,
            ],
            [
                61, 210, 81, 114, 184, 96, 93, 221, 75, 212, 186, 230, 199, 181, 132, 147, 64, 60,
                12, 193,
            ],
            [
                212, 78, 48, 85, 45, 78, 7, 76, 223, 24, 65, 32, 97, 32, 59, 246, 218, 176, 145, 71,
            ],
            [
                75, 8, 229, 22, 87, 147, 22, 214, 65, 113, 32, 190, 230, 116, 189, 118, 133, 226,
                92, 62,
            ],
            [
                98, 145, 141, 169, 66, 37, 122, 147, 127, 16, 162, 52, 119, 4, 174, 30, 71, 208,
                33, 136,
            ],
            [
                176, 56, 15, 233, 68, 162, 174, 64, 50, 219, 117, 168, 31, 47, 233, 99, 80, 107,
                61, 203,
            ],
            [
                52, 166, 199, 233, 39, 235, 10, 51, 158, 206, 107, 204, 12, 48, 124, 251, 88, 137,
                112, 174,
            ],
            [
                254, 73, 214, 89, 49, 12, 220, 221, 139, 218, 94, 187, 238, 149, 233, 9, 100, 251,
                97, 191,
            ],
            [
                56, 77, 149, 24, 48, 157, 212, 77, 130, 35, 148, 127, 84, 35, 83, 16, 253, 89, 207,
                194,
            ],
            [
                155, 2, 110, 254, 76, 70, 31, 172, 217, 188, 118, 110, 84, 95, 62, 76, 226, 170,
                215, 195,
            ],
            [
                82, 87, 149, 92, 18, 193, 150, 157, 181, 109, 161, 116, 21, 89, 218, 234, 133, 110,
                42, 135,
            ],
            [
                215, 223, 114, 187, 0, 91, 77, 74, 185, 176, 235, 198, 248, 75, 248, 173, 3, 88,
                193, 22,
            ],
            [
                125, 251, 185, 107, 246, 28, 52, 80, 6, 156, 201, 75, 88, 189, 168, 214, 95, 32,
                158, 177,
            ],
            [
                215, 78, 218, 5, 160, 74, 237, 129, 69, 142, 4, 252, 67, 11, 233, 124, 146, 67,
                112, 212,
            ],
            [
                132, 198, 73, 244, 240, 73, 9, 235, 48, 123, 243, 141, 219, 139, 185, 182, 183,
                133, 244, 32,
            ],
            [
                194, 50, 102, 73, 50, 207, 219, 33, 130, 138, 229, 51, 181, 19, 52, 253, 186, 141,
                48, 21,
            ],
            [
                226, 167, 234, 175, 63, 36, 67, 39, 43, 77, 132, 76, 160, 100, 157, 179, 16, 101,
                63, 10,
            ],
            [
                112, 157, 11, 220, 106, 238, 253, 148, 115, 62, 57, 48, 84, 84, 169, 248, 204, 56,
                74, 142,
            ],
            [
                179, 119, 143, 134, 39, 242, 18, 224, 238, 59, 143, 133, 250, 152, 62, 181, 84, 57,
                40, 186,
            ],
            [
                28, 58, 161, 96, 27, 136, 144, 48, 140, 254, 4, 187, 203, 41, 14, 199, 17, 147,
                134, 2,
            ],
            [
                98, 11, 59, 22, 161, 4, 129, 88, 87, 252, 104, 233, 58, 54, 173, 134, 122, 77, 211,
                219,
            ],
            [
                70, 213, 158, 179, 250, 35, 117, 81, 68, 48, 239, 201, 189, 152, 118, 114, 40, 103,
                39, 113,
            ],
            [
                99, 223, 86, 153, 116, 60, 28, 241, 230, 195, 20, 92, 67, 238, 152, 102, 154, 128,
                100, 110,
            ],
            [
                117, 144, 231, 136, 108, 240, 46, 23, 7, 151, 203, 120, 154, 92, 16, 171, 61, 42,
                251, 106,
            ],
            [
                208, 83, 62, 66, 185, 198, 134, 189, 161, 177, 172, 237, 185, 250, 156, 93, 194,
                26, 246, 14,
            ],
            [
                133, 219, 188, 105, 51, 221, 173, 162, 191, 40, 65, 166, 238, 88, 67, 109, 173, 16,
                77, 88,
            ],
            [
                62, 125, 243, 69, 12, 54, 225, 119, 113, 164, 139, 155, 247, 203, 67, 200, 195, 31,
                167, 53,
            ],
            [
                63, 245, 167, 126, 45, 97, 10, 134, 157, 225, 103, 150, 51, 182, 70, 203, 155, 58,
                88, 61,
            ],
            [
                62, 107, 73, 179, 94, 194, 125, 113, 220, 2, 108, 43, 41, 1, 188, 50, 167, 25, 110,
                238,
            ],
            [
                129, 193, 41, 255, 88, 58, 115, 154, 8, 154, 2, 170, 88, 223, 208, 130, 121, 116,
                165, 247,
            ],
            [
                66, 77, 191, 106, 113, 78, 164, 23, 90, 22, 221, 17, 212, 48, 245, 128, 123, 129,
                2, 140,
            ],
            [
                85, 244, 127, 94, 165, 120, 70, 181, 199, 222, 68, 77, 120, 116, 147, 18, 57, 201,
                147, 108,
            ],
            [
                114, 172, 133, 6, 56, 63, 184, 171, 52, 99, 42, 111, 92, 135, 157, 206, 75, 146,
                177, 23,
            ],
            [
                143, 138, 182, 202, 3, 141, 238, 143, 153, 94, 173, 143, 17, 222, 32, 78, 209, 222,
                52, 50,
            ],
            [
                184, 146, 67, 185, 140, 226, 226, 149, 140, 193, 151, 183, 118, 182, 10, 12, 212,
                207, 114, 51,
            ],
            [
                106, 14, 23, 201, 195, 40, 199, 201, 150, 114, 231, 179, 146, 56, 91, 34, 108, 170,
                22, 56,
            ],
            [
                114, 215, 45, 255, 103, 136, 49, 98, 137, 35, 37, 96, 209, 199, 142, 193, 90, 170,
                196, 128,
            ],
            [
                100, 117, 15, 23, 202, 111, 51, 215, 118, 171, 210, 8, 50, 18, 183, 143, 188, 68,
                59, 71,
            ],
            [
                52, 54, 186, 9, 68, 244, 77, 61, 115, 181, 167, 100, 22, 54, 66, 255, 172, 47, 170,
                52,
            ],
            [
                38, 130, 22, 103, 126, 229, 60, 30, 226, 155, 106, 8, 107, 42, 217, 204, 9, 134,
                229, 177,
            ],
            [
                195, 4, 205, 173, 164, 100, 131, 214, 117, 131, 141, 240, 219, 161, 172, 82, 227,
                38, 210, 182,
            ],
            [
                76, 208, 240, 22, 179, 211, 179, 131, 8, 178, 169, 94, 206, 21, 122, 212, 249, 127,
                12, 96,
            ],
            [
                102, 234, 191, 166, 32, 65, 124, 189, 57, 137, 72, 236, 254, 123, 163, 248, 64,
                123, 33, 105,
            ],
            [
                161, 169, 151, 100, 113, 90, 10, 64, 0, 119, 139, 182, 31, 11, 19, 75, 202, 90, 17,
                120,
            ],
            [
                173, 34, 24, 75, 126, 169, 56, 22, 20, 159, 85, 118, 156, 232, 51, 96, 37, 79, 215,
                167,
            ],
            [
                54, 111, 162, 209, 131, 111, 156, 44, 82, 62, 88, 223, 91, 131, 255, 215, 109, 55,
                102, 83,
            ],
            [
                178, 237, 128, 29, 158, 15, 108, 179, 227, 113, 137, 246, 204, 189, 247, 88, 207,
                89, 231, 226,
            ],
            [
                247, 215, 150, 151, 31, 176, 240, 69, 242, 226, 204, 179, 75, 163, 88, 33, 229, 0,
                206, 116,
            ],
            [
                146, 77, 141, 25, 40, 119, 226, 107, 44, 179, 200, 24, 197, 23, 53, 1, 138, 138,
                124, 230,
            ],
            [
                189, 189, 45, 142, 250, 191, 99, 91, 76, 113, 200, 114, 40, 220, 1, 148, 249, 114,
                250, 15,
            ],
            [
                89, 245, 254, 36, 161, 93, 59, 33, 64, 95, 229, 129, 36, 172, 41, 173, 35, 110,
                200, 1,
            ],
            [
                97, 18, 214, 147, 205, 141, 252, 225, 248, 206, 150, 164, 119, 128, 84, 25, 74,
                219, 19, 59,
            ],
            [
                236, 148, 85, 45, 75, 17, 99, 245, 183, 154, 55, 7, 203, 157, 96, 11, 225, 144, 6,
                248,
            ],
            [
                80, 60, 169, 253, 168, 230, 47, 1, 212, 254, 240, 221, 150, 19, 63, 88, 164, 204,
                90, 235,
            ],
            [
                99, 238, 142, 62, 57, 121, 204, 200, 4, 239, 80, 21, 21, 82, 237, 97, 94, 93, 211,
                171,
            ],
            [
                153, 128, 227, 214, 122, 116, 174, 124, 243, 25, 172, 141, 147, 205, 9, 157, 98,
                202, 86, 151,
            ],
            [
                54, 240, 120, 226, 109, 35, 199, 95, 142, 134, 78, 214, 9, 53, 80, 160, 66, 2, 121,
                123,
            ],
            [
                146, 13, 142, 147, 145, 129, 203, 131, 233, 74, 149, 26, 5, 79, 167, 151, 85, 169,
                238, 248,
            ],
            [
                30, 250, 243, 63, 35, 233, 142, 123, 250, 122, 72, 6, 127, 4, 89, 82, 246, 6, 231,
                4,
            ],
            [
                229, 21, 143, 188, 171, 74, 237, 245, 144, 226, 79, 168, 64, 208, 118, 91, 26, 168,
                182, 84,
            ],
            [
                103, 4, 113, 122, 201, 196, 71, 62, 202, 151, 247, 45, 180, 239, 218, 183, 90, 48,
                39, 156,
            ],
            [
                6, 52, 88, 177, 145, 74, 225, 100, 136, 252, 249, 26, 112, 53, 16, 45, 211, 147,
                248, 174,
            ],
            [
                108, 47, 40, 124, 138, 127, 47, 204, 246, 38, 196, 251, 163, 248, 38, 23, 29, 217,
                183, 90,
            ],
            [
                182, 250, 196, 208, 125, 179, 10, 252, 209, 63, 223, 87, 31, 140, 94, 215, 54, 35,
                25, 248,
            ],
            [
                131, 242, 250, 251, 85, 148, 209, 16, 21, 12, 120, 116, 30, 138, 194, 233, 222,
                148, 199, 37,
            ],
            [
                231, 220, 245, 14, 166, 189, 3, 237, 169, 92, 210, 8, 136, 33, 197, 103, 68, 170,
                28, 106,
            ],
            [
                39, 211, 32, 225, 205, 61, 79, 182, 110, 74, 42, 23, 253, 58, 64, 179, 20, 136,
                127, 214,
            ],
            [
                61, 35, 116, 161, 146, 169, 128, 35, 91, 189, 149, 30, 49, 129, 139, 102, 5, 230,
                243, 78,
            ],
            [
                230, 101, 181, 127, 19, 248, 230, 179, 221, 137, 229, 223, 135, 13, 97, 120, 141,
                4, 160, 244,
            ],
            [
                128, 74, 71, 206, 232, 131, 16, 175, 108, 208, 49, 166, 91, 54, 196, 128, 18, 253,
                11, 66,
            ],
            [
                54, 241, 35, 164, 43, 190, 13, 174, 145, 33, 245, 88, 205, 211, 179, 49, 199, 209,
                76, 190,
            ],
            [
                225, 241, 168, 105, 19, 230, 136, 150, 15, 67, 62, 48, 130, 236, 29, 126, 90, 91,
                156, 226,
            ],
            [
                84, 8, 233, 76, 254, 93, 50, 141, 113, 127, 80, 160, 95, 44, 248, 119, 180, 140,
                186, 138,
            ],
            [
                107, 116, 7, 93, 30, 231, 81, 162, 89, 154, 150, 10, 79, 55, 71, 226, 60, 56, 47,
                149,
            ],
            [
                160, 1, 192, 187, 233, 38, 213, 7, 35, 196, 115, 75, 178, 0, 0, 11, 218, 84, 150,
                142,
            ],
            [
                53, 113, 135, 82, 50, 111, 195, 208, 41, 62, 122, 202, 227, 68, 103, 71, 229, 103,
                20, 128,
            ],
            [
                153, 72, 100, 211, 152, 133, 197, 226, 106, 10, 51, 18, 8, 109, 46, 5, 38, 205, 20,
                1,
            ],
            [
                15, 29, 110, 202, 90, 105, 3, 39, 1, 44, 115, 214, 221, 155, 105, 183, 222, 62, 96,
                160,
            ],
            [
                110, 3, 97, 176, 207, 96, 236, 190, 215, 160, 36, 125, 166, 213, 130, 136, 145,
                234, 193, 178,
            ],
            [
                177, 222, 150, 79, 38, 226, 82, 183, 181, 192, 182, 172, 204, 106, 104, 214, 211,
                177, 202, 248,
            ],
            [
                214, 218, 15, 66, 207, 37, 149, 100, 1, 231, 64, 5, 113, 74, 23, 14, 78, 35, 156,
                160,
            ],
            [
                74, 94, 37, 34, 183, 153, 135, 128, 56, 51, 167, 67, 123, 79, 157, 231, 227, 255,
                228, 128,
            ],
            [
                68, 165, 100, 61, 131, 181, 137, 208, 108, 33, 225, 134, 9, 161, 126, 138, 59, 149,
                149, 28,
            ],
            [
                133, 119, 146, 73, 160, 180, 89, 25, 0, 153, 145, 9, 122, 81, 179, 88, 24, 95, 147,
                19,
            ],
            [
                22, 134, 112, 98, 193, 89, 206, 30, 72, 70, 216, 67, 204, 30, 200, 17, 126, 123,
                61, 222,
            ],
            [
                131, 102, 163, 239, 225, 2, 247, 225, 36, 135, 197, 96, 94, 170, 176, 68, 196, 9,
                167, 219,
            ],
            [
                237, 29, 224, 134, 204, 17, 220, 84, 81, 51, 34, 237, 204, 148, 59, 207, 158, 251,
                249, 184,
            ],
            [
                221, 69, 54, 158, 99, 182, 20, 145, 160, 82, 178, 25, 193, 205, 124, 28, 120, 171,
                144, 11,
            ],
            [
                138, 65, 91, 144, 143, 237, 246, 112, 156, 44, 216, 83, 17, 208, 86, 185, 13, 150,
                244, 89,
            ],
            [
                3, 239, 104, 239, 47, 67, 33, 129, 140, 247, 159, 68, 246, 92, 48, 77, 234, 109,
                255, 25,
            ],
            [
                224, 43, 139, 151, 227, 90, 190, 56, 124, 37, 211, 5, 255, 6, 99, 46, 235, 56, 163,
                255,
            ],
            [
                17, 156, 109, 226, 145, 49, 173, 61, 242, 31, 230, 142, 175, 72, 254, 249, 3, 192,
                107, 80,
            ],
            [
                109, 201, 225, 122, 98, 155, 219, 136, 79, 85, 91, 203, 211, 24, 0, 20, 207, 3,
                220, 159,
            ],
            [
                93, 47, 204, 108, 148, 50, 75, 234, 35, 60, 152, 150, 204, 251, 215, 178, 29, 132,
                139, 148,
            ],
            [
                151, 237, 175, 164, 189, 211, 42, 243, 186, 204, 245, 46, 173, 18, 110, 86, 75,
                221, 181, 239,
            ],
            [
                90, 149, 3, 171, 27, 73, 61, 132, 10, 40, 247, 112, 184, 23, 122, 197, 102, 210,
                226, 71,
            ],
            [
                73, 41, 22, 46, 198, 9, 92, 196, 52, 65, 70, 154, 161, 188, 201, 64, 44, 104, 158,
                195,
            ],
            [
                86, 202, 48, 228, 160, 178, 40, 194, 17, 130, 196, 164, 97, 91, 52, 14, 182, 95,
                225, 63,
            ],
            [
                247, 23, 49, 111, 62, 242, 217, 141, 232, 216, 53, 130, 198, 152, 61, 72, 168, 186,
                238, 225,
            ],
        ];

        let nodes: Vec<Node> = ids
            .iter()
            .map(|id| Node {
                id: Id(id.to_owned()),
                ip: "0.0.0.0".parse().unwrap(),
                port: 0,
            })
            .collect();

        let closest_ids = [
            [
                6, 52, 88, 177, 145, 74, 225, 100, 136, 252, 249, 26, 112, 53, 16, 45, 211, 147,
                248, 174,
            ],
            [
                15, 29, 110, 202, 90, 105, 3, 39, 1, 44, 115, 214, 221, 155, 105, 183, 222, 62, 96,
                160,
            ],
            [
                22, 134, 112, 98, 193, 89, 206, 30, 72, 70, 216, 67, 204, 30, 200, 17, 126, 123,
                61, 222,
            ],
            [
                28, 58, 161, 96, 27, 136, 144, 48, 140, 254, 4, 187, 203, 41, 14, 199, 17, 147,
                134, 2,
            ],
            [
                30, 250, 243, 63, 35, 233, 142, 123, 250, 122, 72, 6, 127, 4, 89, 82, 246, 6, 231,
                4,
            ],
            [
                38, 130, 22, 103, 126, 229, 60, 30, 226, 155, 106, 8, 107, 42, 217, 204, 9, 134,
                229, 177,
            ],
            [
                39, 211, 32, 225, 205, 61, 79, 182, 110, 74, 42, 23, 253, 58, 64, 179, 20, 136,
                127, 214,
            ],
            [
                46, 111, 151, 51, 168, 60, 43, 185, 238, 4, 103, 227, 85, 160, 223, 83, 134, 229,
                84, 41,
            ],
            [
                52, 54, 186, 9, 68, 244, 77, 61, 115, 181, 167, 100, 22, 54, 66, 255, 172, 47, 170,
                52,
            ],
            [
                52, 166, 199, 233, 39, 235, 10, 51, 158, 206, 107, 204, 12, 48, 124, 251, 88, 137,
                112, 174,
            ],
            [
                53, 113, 135, 82, 50, 111, 195, 208, 41, 62, 122, 202, 227, 68, 103, 71, 229, 103,
                20, 128,
            ],
            [
                54, 111, 162, 209, 131, 111, 156, 44, 82, 62, 88, 223, 91, 131, 255, 215, 109, 55,
                102, 83,
            ],
            [
                54, 240, 120, 226, 109, 35, 199, 95, 142, 134, 78, 214, 9, 53, 80, 160, 66, 2, 121,
                123,
            ],
            [
                54, 241, 35, 164, 43, 190, 13, 174, 145, 33, 245, 88, 205, 211, 179, 49, 199, 209,
                76, 190,
            ],
            [
                56, 77, 149, 24, 48, 157, 212, 77, 130, 35, 148, 127, 84, 35, 83, 16, 253, 89, 207,
                194,
            ],
            [
                61, 35, 116, 161, 146, 169, 128, 35, 91, 189, 149, 30, 49, 129, 139, 102, 5, 230,
                243, 78,
            ],
            [
                61, 210, 81, 114, 184, 96, 93, 221, 75, 212, 186, 230, 199, 181, 132, 147, 64, 60,
                12, 193,
            ],
            [
                62, 107, 73, 179, 94, 194, 125, 113, 220, 2, 108, 43, 41, 1, 188, 50, 167, 25, 110,
                238,
            ],
            [
                62, 125, 243, 69, 12, 54, 225, 119, 113, 164, 139, 155, 247, 203, 67, 200, 195, 31,
                167, 53,
            ],
            [
                63, 245, 167, 126, 45, 97, 10, 134, 157, 225, 103, 150, 51, 182, 70, 203, 155, 58,
                88, 61,
            ],
        ];

        let closest_nodes: Vec<Node> = ids
            .iter()
            .map(|id| Node {
                id: Id(id.to_owned()),
                ip: "0.0.0.0".parse().unwrap(),
                port: 0,
            })
            .collect();

        dbg!(closest_nodes);
    }
}
